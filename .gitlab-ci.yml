only:
  - tags

stages:
  - release
  - publish

variables:
  GOPATH: ${CI_PROJECT_DIR}/.go

goreleaser:
  stage: release
  dependencies: []
  only:
    - tags
  image:
    name: goreleaser/goreleaser:v1.25.1
    entrypoint: [""]
  variables:
    # Disable shallow cloning so that goreleaser can diff between tags to
    # generate a changelog.
    GIT_DEPTH: 0
    GITLAB_TOKEN: $CI_JOB_TOKEN
  before_script:
    - apk add gpg-agent
    - gpg --batch --no-tty --passphrase $PASSPHRASE --import $GPG_PRIVATE_KEY
    - "export GPG_FINGERPRINT=$(gpg --with-colons --list-keys | awk -F: '/^pub/ { print $5 }')"
  script:
    - goreleaser release
    # NOTE(@timofurrer): goreleaser doesn't write `release.extra_files` to the `dist/` folder
    #                    before upload, therefore, we are going to create it for now.
    #                    Note that it also strips the first character (the leading `v`) from the tag
    - cp terraform-registry-manifest.json dist/${CI_PROJECT_NAME}_${CI_COMMIT_TAG:1}_manifest.json
  artifacts:
    paths:
      - dist/$CI_PROJECT_NAME_*.zip
      - dist/$CI_PROJECT_NAME_*_SHA256SUMS*
      - dist/$CI_PROJECT_NAME_*_manifest.json
      - docs/
      - CHANGELOG.md

github-for-terraform-registry:
  stage: publish
  only:
    - tags
  image: alpine:3.19
  variables:
    GIT_STRATEGY: none
    GITHUB_ORG: pubg
    GITHUB_REPO: $CI_PROJECT_NAME
  before_script:
    - apk add --update curl jq file git
    - ls dist/
  script:
    # NOTE(@timofurrer): publish docs to GitHub, so that they end up in the GitHub release Source code assets,
    #                    ready for the Terraform Registry to discover.
    - |
      git clone --depth 1 https://gitlab-terraform-provider-bot:$GITHUB_TOKEN_FOR_SYNC@github.com/$GITHUB_ORG/$GITHUB_REPO.git /tmp/github-repo
      cp -rf docs CHANGELOG.md /tmp/github-repo
      cd /tmp/github-repo
      git config user.email "Terraform-Provider-Bot@gitlab.com"
      git config user.name "gitlab-terraform-provider-bot"
      git add docs CHANGELOG.md
      git commit --message "Update docs for $CI_COMMIT_TAG release" --allow-empty
      git push
      cd -
      rm -rf /tmp/github-repo
    # create a pre-release Release on GitHub
    # see https://docs.github.com/en/rest/releases/releases#create-a-release
    - |
      gh_release=$(curl --silent --show-error --fail-with-body -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN_FOR_SYNC" \
        https://api.github.com/repos/$GITHUB_ORG/$GITHUB_REPO/releases \
        -d '{
          "tag_name":"'$CI_COMMIT_TAG'",
          "target_commitish":"main",
          "name":"'$CI_COMMIT_TAG'",
          "body":"This release hosted on GitHub only exists because it is the only way to publish to the Terraform Provider Registry.\n\nSee the official release page on GitLab here: **'$CI_PROJECT_URL'/-/releases/'$CI_COMMIT_TAG'**",
          "draft":false,
          "prerelease":true,
          "generate_release_notes":false
        }'
      )
    - gh_release_id=$(echo $gh_release | jq -r '.id')
    # NOTE(@timofurrer): cannot use `.upload_url` from `$gh_release`, because it contains the query parameters in some weird unusable way ...
    - gh_release_upload_url="https://uploads.github.com/repos/$GITHUB_ORG/$GITHUB_REPO/releases/$gh_release_id/assets"
    - 'echo "GitHub Release URL: $gh_release_upload_url"'
    # uploading release assets for GitHub release created in previous step
    # see https://docs.github.com/en/rest/releases/assets#upload-a-release-asset
    - |
      echo "Uploading assets from dist/ produced by goreleaser"
      for asset in dist/*; do
        echo -n "Uploading $asset ..."
        content_type=$(file -b --mime-type "$asset")
        filename=$(basename "$asset")
        curl --silent --output /dev/null --show-error --fail-with-body -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN_FOR_SYNC" \
          "$gh_release_upload_url?name=$filename" \
          -H "Content-Type: $content_type" \
          --data-binary "@$asset"
        echo " done."
      done
    # now that all assets are uploaded we can "release" the "pre-release" created earlier.
    - |
      curl --silent --show-error --fail-with-body \
        -X PATCH \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: token $GITHUB_TOKEN_FOR_SYNC" \
        https://api.github.com/repos/$GITHUB_ORG/$GITHUB_REPO/releases/$gh_release_id \
        -d '{"prerelease":false}'
